;`index-baileys.ts > clients > {
  '4': {
    type: 'md',
    ws: WebSocketClient {
      _events: [Object: null prototype],
      _eventsCount: 21,
      _maxListeners: 0,
      url: URL {},
      config: [Object],
      socket: [WebSocket],
      [Symbol(kCapture)]: false
    },
    ev: {
      process: [Function: process],
      emit: [Function: emit],
      isBuffering: [Function: isBuffering],
      buffer: [Function: buffer],
      flush: [Function: flush],
      createBufferedFunction: [Function: createBufferedFunction],
      on: [Function: on],
      off: [Function: off],
      removeAllListeners: [Function: removeAllListeners]
    },
    authState: { creds: [Object], keys: [Object] },
    signalRepository: {
      decryptGroupMessage: [Function: decryptGroupMessage],
      processSenderKeyDistributionMessage: [AsyncFunction: processSenderKeyDistributionMessage],
      decryptMessage: [AsyncFunction: decryptMessage],
      encryptMessage: [AsyncFunction: encryptMessage],
      encryptGroupMessage: [AsyncFunction: encryptGroupMessage],
      injectE2ESession: [AsyncFunction: injectE2ESession],
      jidToSignalProtocolAddress: [Function: jidToSignalProtocolAddress]
    },
    user: {
      id: '33678087207:14@s.whatsapp.net',
      lid: '71215003775148:14@lid',
      name: 'Vincent Caronnet'
    },
    generateMessageTag: [Function: generateMessageTag],
    query: [AsyncFunction: query],
    waitForMessage: [AsyncFunction: waitForMessage],
    waitForSocketOpen: [AsyncFunction: waitForSocketOpen],
    sendRawMessage: [AsyncFunction: sendRawMessage],
    sendNode: [Function: sendNode],
    logout: [AsyncFunction: logout],
    end: [Function: end],
    onUnexpectedError: [Function: onUnexpectedError],
    uploadPreKeys: [AsyncFunction: uploadPreKeys],
    uploadPreKeysToServerIfRequired: [AsyncFunction: uploadPreKeysToServerIfRequired],
    requestPairingCode: [AsyncFunction: requestPairingCode],
    waitForConnectionUpdate: [AsyncFunction (anonymous)],
    sendWAMBuffer: [Function: sendWAMBuffer],
    processingMutex: { mutex: [Function: mutex] },
    fetchPrivacySettings: [AsyncFunction: fetchPrivacySettings],
    upsertMessage: [AsyncFunction (anonymous)],
    appPatch: [AsyncFunction: appPatch],
    sendPresenceUpdate: [AsyncFunction: sendPresenceUpdate],
    presenceSubscribe: [Function: presenceSubscribe],
    profilePictureUrl: [AsyncFunction: profilePictureUrl],
    onWhatsApp: [AsyncFunction: onWhatsApp],
    fetchBlocklist: [AsyncFunction: fetchBlocklist],
    fetchStatus: [AsyncFunction: fetchStatus],
    updateProfilePicture: [AsyncFunction: updateProfilePicture],
    removeProfilePicture: [AsyncFunction: removeProfilePicture],
    updateProfileStatus: [AsyncFunction: updateProfileStatus],
    updateProfileName: [AsyncFunction: updateProfileName],
    updateBlockStatus: [AsyncFunction: updateBlockStatus],
    updateCallPrivacy: [AsyncFunction: updateCallPrivacy],
    updateLastSeenPrivacy: [AsyncFunction: updateLastSeenPrivacy],
    updateOnlinePrivacy: [AsyncFunction: updateOnlinePrivacy],
    updateProfilePicturePrivacy: [AsyncFunction: updateProfilePicturePrivacy],
    updateStatusPrivacy: [AsyncFunction: updateStatusPrivacy],
    updateReadReceiptsPrivacy: [AsyncFunction: updateReadReceiptsPrivacy],
    updateGroupsAddPrivacy: [AsyncFunction: updateGroupsAddPrivacy],
    updateDefaultDisappearingMode: [AsyncFunction: updateDefaultDisappearingMode],
    getBusinessProfile: [AsyncFunction: getBusinessProfile],
    resyncAppState: [AsyncFunction (anonymous)],
    chatModify: [Function: chatModify],
    cleanDirtyBits: [AsyncFunction: cleanDirtyBits],
    addChatLabel: [Function: addChatLabel],
    removeChatLabel: [Function: removeChatLabel],
    addMessageLabel: [Function: addMessageLabel],
    removeMessageLabel: [Function: removeMessageLabel],
    star: [Function: star],
    groupMetadata: [AsyncFunction: groupMetadata],
    groupCreate: [AsyncFunction: groupCreate],
    groupLeave: [AsyncFunction: groupLeave],
    groupUpdateSubject: [AsyncFunction: groupUpdateSubject],
    groupRequestParticipantsList: [AsyncFunction: groupRequestParticipantsList],
    groupRequestParticipantsUpdate: [AsyncFunction: groupRequestParticipantsUpdate],
    groupParticipantsUpdate: [AsyncFunction: groupParticipantsUpdate],
    groupUpdateDescription: [AsyncFunction: groupUpdateDescription],
    groupInviteCode: [AsyncFunction: groupInviteCode],
    groupRevokeInvite: [AsyncFunction: groupRevokeInvite],
    groupAcceptInvite: [AsyncFunction: groupAcceptInvite],
    groupRevokeInviteV4: [AsyncFunction: groupRevokeInviteV4],
    groupAcceptInviteV4: [AsyncFunction (anonymous)],
    groupGetInviteInfo: [AsyncFunction: groupGetInviteInfo],
    groupToggleEphemeral: [AsyncFunction: groupToggleEphemeral],
    groupSettingUpdate: [AsyncFunction: groupSettingUpdate],
    groupMemberAddMode: [AsyncFunction: groupMemberAddMode],
    groupJoinApprovalMode: [AsyncFunction: groupJoinApprovalMode],
    groupFetchAllParticipating: [AsyncFunction: groupFetchAllParticipating],
    getPrivacyTokens: [AsyncFunction: getPrivacyTokens],
    assertSessions: [AsyncFunction: assertSessions],
    relayMessage: [AsyncFunction: relayMessage],
    sendReceipt: [AsyncFunction: sendReceipt],
    sendReceipts: [AsyncFunction: sendReceipts],
    readMessages: [AsyncFunction: readMessages],
    refreshMediaConn: [AsyncFunction: refreshMediaConn],
    waUploadToServer: [AsyncFunction (anonymous)],
    sendPeerDataOperationMessage: [AsyncFunction: sendPeerDataOperationMessage],
    updateMediaMessage: [AsyncFunction: updateMediaMessage],
    sendMessage: [AsyncFunction: sendMessage],
    sendMessageAck: [AsyncFunction: sendMessageAck],
    sendRetryRequest: [AsyncFunction: sendRetryRequest],
    rejectCall: [AsyncFunction: rejectCall],
    fetchMessageHistory: [AsyncFunction: fetchMessageHistory],
    requestPlaceholderResend: [AsyncFunction: requestPlaceholderResend],
    logger: EventEmitter {
      levels: [Object],
      silent: [Function: noop],
      onChild: [Function: noop],
      trace: [Function: LOG],
      debug: [Function: LOG],
      info: [Function: LOG],
      warn: [Function: LOG],
      error: [Function: LOG],
      fatal: [Function (anonymous)],
      [Symbol(pino.levelComp)]: [Function: bound compareLevel],
      [Symbol(pino.useOnlyCustomLevels)]: false,
      [Symbol(pino.stream)]: [SonicBoom],
      [Symbol(pino.time)]: [Function: timestamp],
      [Symbol(pino.timeSliceIndex)]: 8,
      [Symbol(pino.stringify)]: [Function: stringify],
      [Symbol(pino.stringifySafe)]: [Function: stringify],
      [Symbol(pino.stringifiers)]: {},
      [Symbol(pino.end)]: '}\n',
      [Symbol(pino.formatOpts)]: [Object],
      [Symbol(pino.messageKey)]: 'msg',
      [Symbol(pino.errorKey)]: 'err',
      [Symbol(pino.nestedKey)]: null,
      [Symbol(pino.nestedKeyStr)]: '',
      [Symbol(pino.serializers)]: [Object],
      [Symbol(pino.mixin)]: undefined,
      [Symbol(pino.mixinMergeStrategy)]: undefined,
      [Symbol(pino.chindings)]: ',"pid":71744,"hostname":"MacBook-Air-de-Vincent.local"',
      [Symbol(pino.formatters)]: [Object],
      [Symbol(pino.hooks)]: [Object],
      [Symbol(pino.msgPrefix)]: undefined,
      [Symbol(pino.lsCache)]: [Object],
      [Symbol(pino.levelVal)]: 10
    },
    getOrderDetails: [AsyncFunction: getOrderDetails],
    getCatalog: [AsyncFunction: getCatalog],
    getCollections: [AsyncFunction: getCollections],
    productCreate: [AsyncFunction: productCreate],
    productDelete: [AsyncFunction: productDelete],
    productUpdate: [AsyncFunction: productUpdate],
    register: [AsyncFunction: register],
    requestRegistrationCode: [AsyncFunction: requestRegistrationCode]
  }
}`
